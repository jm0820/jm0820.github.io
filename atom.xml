<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jm0820.github.io</id>
    <title>小王同学</title>
    <updated>2020-04-30T14:20:28.312Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jm0820.github.io"/>
    <link rel="self" href="https://jm0820.github.io/atom.xml"/>
    <subtitle>永远废物，永远混吃等死</subtitle>
    <logo>https://jm0820.github.io/images/avatar.png</logo>
    <icon>https://jm0820.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 小王同学</rights>
    <entry>
        <title type="html"><![CDATA[Python——基础语法&数据类型]]></title>
        <id>https://jm0820.github.io/post/python-ji-chu-yu-fa-andshu-ju-lei-xing/</id>
        <link href="https://jm0820.github.io/post/python-ji-chu-yu-fa-andshu-ju-lei-xing/">
        </link>
        <updated>2020-04-30T14:19:17.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="基础语法">基础语法</h2>
<p><strong>标识符</strong></p>
<ul>
<li>第一个字符是字母或者_</li>
<li>标识符可以由字母、数字或者下划线组成</li>
<li>标识符大小写敏感</li>
<li>python3 中还可以使用中文，非ASCII标识符也允许，但不符合我们一般的编程习惯，一般不建议<br>
例如:</li>
</ul>
<pre><code>a 
_a
_a1
变量
</code></pre>
<p><strong>关键字</strong><br>
不能使用关键字作为变量的名称，python 标准库提供了一个keyword 模板，可以输出当前版本所有的关键字:</p>
<ol>
<li>导入keyword 库：<code>import keyword</code></li>
<li>查询关键字：<code>keyword.kwlist</code></li>
</ol>
<p>这是Python3 的关键字:</p>
<blockquote>
<p>'False','None', 'True', 'and', 'as',<br>
'assert', 'async', 'await', 'break', 'class',<br>
'continue', 'def', 'del', 'elif', 'else',<br>
'except', 'finally', 'for', 'from', 'global',<br>
'if', 'import', 'in', 'is', 'lambda',<br>
'nonlocal', 'not', 'or', 'pass', 'raise',<br>
'return', 'try', 'while', 'with', 'yield'</p>
</blockquote>
<p><strong>注释</strong></p>
<ul>
<li>单行注释:单行注释以#开头</li>
</ul>
<pre><code># 第一个注释
print(&quot;hello world&quot;); # 第二个注释
</code></pre>
<ul>
<li>多行注释</li>
</ul>
<pre><code>&quot;&quot;&quot;
这是第一行注释
这是第二行注释   
这是第三行注释
&quot;&quot;&quot;
print(&quot;hello world&quot;);
</code></pre>
<p><strong>缩进</strong><br>
Python 使用缩进来代表代码块，缩进的空格数可变，但同一个代码块必须使用相同的缩进</p>
<pre><code>if a &gt; 10:
    print(&quot;a &gt; 10&quot;);
elif a == 10:
    print(&quot;a = 10&quot;);
else:
    print(&quot;a &lt; 10&quot;);
print(&quot;over&quot;);
</code></pre>
<p>最下面的打印语句就不在if,else 代码块内</p>
<p><strong>多行语句</strong><br>
如果一个语句过长，Python 可以使用反斜杠来实现多行语句.</p>
<pre><code>a = &quot;abc&quot;+\
    &quot;def&quot;+\
    &quot;ghi&quot;
print(a)
</code></pre>
<p>输出为：<code>abcdefghi</code></p>
<p>注意：在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()，例如：<br>
<strong>同一行显示多条语句</strong><br>
Python可以在同一行中使用多条语句，语句之间使用分号(;)分割，以下是一个简单的实例:</p>
<pre><code>a = 11;print(a)
</code></pre>
<p>Python 不必每个语句后面加上<code>;</code></p>
<p><strong>空行</strong><br>
函数之间或类的方法之间用空行分隔，表示一段新的代码的开始，类和函数入口也用一行空格分割，以突出函数入口开始.</p>
<ul>
<li>空行并不是Python 语法的一部分，不写空行Python解释器运行也不会出错.</li>
<li>空行是程序的一部分</li>
</ul>
<p><strong>import</strong></p>
<ul>
<li>将整个模块导入</li>
</ul>
<pre><code>import ModuleName
</code></pre>
<ul>
<li>从某个模块导入某个函数</li>
</ul>
<pre><code>from ModuleName import FunctionName
</code></pre>
<ul>
<li>从某个模块导入多个函数</li>
</ul>
<pre><code>from ModuleName import FunctionName1,FunctionName2,FunctionName3
</code></pre>
<ul>
<li>将某个模块中的函数全部导入</li>
</ul>
<pre><code>from ModuleName import *
</code></pre>
<h2 id="变量">变量</h2>
<p>py中使用变量不需要声明，直接赋值，不能使用没有赋值的变量。<br>
py是一个动态类型语言，可以为变量赋任意类型值，也可以任意修改变量的值</p>
<pre><code>a = 10
a = &quot;abc&quot;
a = [1,2,3]
a = (1,2,3)
</code></pre>
<p>python 可以为多个变量同时赋值</p>
<pre><code>a,b = 1,2  
</code></pre>
<p>在混合运算时，Python 会把整型转化为浮点型</p>
<pre><code>&gt;&gt;&gt; 10/5+2
4.0
</code></pre>
<h2 id="数据类型">数据类型</h2>
<p>Python 中的标准数据类型</p>
<ul>
<li>Number(数字)</li>
<li>String(字符串)</li>
<li>List(列表)</li>
<li>Tuple(元组)</li>
<li>Set(集合)</li>
<li>Dictionary(字典)</li>
</ul>
<p>数据可变:List、Set、Dictionary<br>
数据不可变:Number、String、Tuple</p>
<p><strong>type()和isinstance()</strong></p>
<p>type是Python 的内置函数，可以用来判断变量所指的对象类型.</p>
<pre><code>print(type(1))
print(type(1.1))
print(type(True))
print(type(&quot;Tom&quot;))
print(type([1,2,3]))
print(type((1,2,3)))
print(type({1,2,3}))
print(type({'name':'Tom','age':18}))
</code></pre>
<p>结果:</p>
<pre><code>&lt;class 'int'&gt;
&lt;class 'float'&gt;
&lt;class 'bool'&gt;
&lt;class 'str'&gt;
&lt;class 'list'&gt;
&lt;class 'tuple'&gt;
&lt;class 'set'&gt;
&lt;class 'dict'&gt;
</code></pre>
<p>instance也可以用来判断</p>
<pre><code>print(isinstance(1,int))
print(isinstance(1.1,float))
print(isinstance(True,bool))
print(isinstance(&quot;Tom&quot;,str))
print(isinstance([1,2,3],list))
print(isinstance((1,2,3),tuple))
print(isinstance({1,2,3},set))
print(isinstance({'name':'Tom','age':18},dict))
</code></pre>
<p>结果:</p>
<pre><code>True
True
True
True
True
True
True
True
</code></pre>
<p>type和isinstance 的区别:</p>
<ul>
<li>type 不会认为其子类是一种父类类型</li>
<li>isinstance 会认为其子类是一种父类类型</li>
</ul>
<pre><code>class Parent:
    pass

class Son(Parent):
    pass

print(type(Son()) == Son)
print(type(Son()) == Parent)
print(isinstance(Son(),Son))
print(isinstance(Son(),Parent))
</code></pre>
<p>结果:</p>
<pre><code>True
False
True
True
</code></pre>
<p><strong>del 删除一些对象的引用</strong></p>
<ul>
<li>del VarName</li>
</ul>
<pre><code>var = 10      
del var       
</code></pre>
<h3 id="number-数值">Number 数值</h3>
<p>Number 里有四种数值类型:int float bool complex</p>
<blockquote>
<p>Python2 中是没有bool 类型的，用数字0表示False,数字1表示True,<br>
Python3 中把True和False 定义成关键字了，但它们本质上还是0和1，可以进行运算</p>
</blockquote>
<pre><code>print(True+True)
print(True-True)
print(True+False)
</code></pre>
<p>结果:</p>
<pre><code>2
0
1
</code></pre>
<p><strong>数值运算</strong><br>
数值运算一共有六种：加法、减法、乘法、除法、乘方、取余</p>
<ul>
<li>加法</li>
</ul>
<pre><code>&gt;&gt;&gt; 10+5
15
</code></pre>
<ul>
<li>减法</li>
</ul>
<pre><code>&gt;&gt;&gt; 10-5
5
</code></pre>
<ul>
<li>乘法</li>
</ul>
<pre><code>&gt;&gt;&gt; 10*5
50
</code></pre>
<ul>
<li>除法（得到一个浮点数）</li>
</ul>
<pre><code>&gt;&gt;&gt; 10/5
2.0
</code></pre>
<ul>
<li>除法（得到一个整数）</li>
</ul>
<pre><code>&gt;&gt;&gt; 10//5
2
</code></pre>
<ul>
<li>乘方</li>
</ul>
<pre><code>&gt;&gt;&gt; 10**5
100000
</code></pre>
<ul>
<li>取余</li>
</ul>
<pre><code>&gt;&gt;&gt; 11%5
1
</code></pre>
<h3 id="string-字符串">String 字符串</h3>
<p>使用单引号或者双引号括起来的是字符串</p>
<pre><code>var = 'a'
var = &quot;a&quot;
</code></pre>
<p><strong>字符串连接</strong><br>
使用<code>+</code>进行字符串的连接.</p>
<pre><code>&gt;&gt;&gt; print(&quot;abcdefg&quot;+&quot;Test&quot;)
abcdefgTest
</code></pre>
<p><strong>字符串复制</strong><br>
使用<code>*</code>进行字符串的复制</p>
<pre><code>&gt;&gt;&gt; print(&quot;abc&quot;*3)
abcabcabc
</code></pre>
<p><strong>字符串截取</strong><br>
格式: <code>变量[头下标:尾下标]</code><br>
索引值以0开始为开始下标，以-1为从末尾开始位置</p>
<pre><code>str1 = &quot;abcdefg&quot;
print (str1[0:-1])    # 输出第一个到倒数第二个的所有字符
print (str1[0])       # 输出字符串第一个字符
print (str1[2:5])     # 输出从第三个开始到第五个的字符
print (str1[2:])      # 输出从第三个开始的后的所有字符
</code></pre>
<p>结果:</p>
<pre><code>abcdef
a
cde
cdefg
</code></pre>
<p>Python 可以使用反斜杠转义特殊字符，可以在字符串之前加字符r防止转义</p>
<pre><code>&gt;&gt;&gt; print(&quot;hello\nworld&quot;)
hello
world
&gt;&gt;&gt; print(r&quot;hello\nworld&quot;)
hello\nworld
</code></pre>
<p>字符串是不可变类型，不可以对某个索引进行修改</p>
<pre><code>str1[0] = 'b'
</code></pre>
<p>上面这个操作会报错。</p>
<p>注意:</p>
<ul>
<li>Python 中没有字符类型,'c' 表示一个长度为1的字符串.</li>
</ul>
<h3 id="list列表">List列表</h3>
<p>格式：<code>[]</code>,数据用<code>,</code>分开</p>
<ul>
<li>列表中的数据可以有不同的类型.</li>
<li>列表可以使用索引和截取，被截取后返回的是一个新的列表.</li>
<li><code>+</code>是列表连接运算符，<code>*</code>是重复操作.</li>
<li>列表中的元素是可变的</li>
</ul>
<pre><code>list = [1,&quot;abc&quot;,2]
print(list)
list[2] = &quot;hello&quot;
print(list)
</code></pre>
<p>结果</p>
<pre><code>[1, 'abc', 2]
[1, 'abc', 'hello']
</code></pre>
<ul>
<li>删除列表元素<br>
使用del 进行删除</li>
</ul>
<pre><code>list = [1,&quot;abc&quot;,2]
del list[0]
print(list)
</code></pre>
<p>结果：</p>
<pre><code>[1, 'abc', 2]
['abc', 2]
</code></pre>
<ul>
<li>列表可以嵌套<br>
在列表里可以创建其它列表</li>
</ul>
<pre><code>list2 = [[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;],&quot;d&quot;,&quot;e&quot;]
print(list2[0])
</code></pre>
<p>结果：</p>
<pre><code>['a', 'b', 'c']
</code></pre>
<ul>
<li>Python 列表中的函数</li>
</ul>
<ol>
<li>len(list)列表元素个数</li>
</ol>
<pre><code>&gt;&gt;&gt; print(len([1,&quot;abc&quot;,2]))
3
</code></pre>
<ol start="2">
<li>max(list) 返回列表元素最大值</li>
</ol>
<pre><code>&gt;&gt;&gt; print(max([1,2,3,5,9]))
9
</code></pre>
<ol start="3">
<li>min(list) 返回列表元素最小值</li>
</ol>
<pre><code>&gt;&gt;&gt; print(min([1,2,3,5,9]))
1
</code></pre>
<ol start="4">
<li>list(seq) 将元素转化为列表</li>
</ol>
<pre><code>&gt;&gt;&gt; print(type(list((1,2,3))))
&lt;class 'list'&gt;
</code></pre>
<ul>
<li>Python 中的方法</li>
</ul>
<ol>
<li>list.append(obj)  在列表末尾添加新的对象</li>
</ol>
<pre><code>list1 = [1,2,3]
list1.append(&quot;hello&quot;)
print(list1)  #[1, 2, 3, 'hello']
</code></pre>
<ol start="2">
<li>list.count(obj) 统计某个元素在列表中出现的次数</li>
</ol>
<pre><code>list1 = [1,1,2,3]
print(list1.count(1)) #2
</code></pre>
<ol start="3">
<li>list.extend(seq)在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</li>
</ol>
<pre><code>list1 = [1,2,3]
list1.extend([3,4,5])
print(list1) #[1, 2, 3, 3, 4, 5]
</code></pre>
<ol start="4">
<li>list.index(obj)从列表中找出某个值第一个匹配项的索引位置</li>
</ol>
<pre><code>list1 = [1,2,3,4,3,3]
print(list1.index(3)) #2
</code></pre>
<ol start="5">
<li>list.insert(index, obj) 将对象插入列表</li>
</ol>
<pre><code>list1 = [1,2,3]
list1.insert(2,&quot;hello&quot;)
print(list1) # [1, 2, 'hello', 3]
</code></pre>
<ol start="6">
<li>list.pop([index=-1]) 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</li>
</ol>
<pre><code>list1 = [1,2,3]
list1.pop()
print(list1) # [1, 2]
list1.pop(0)
print(list1) #[2]
</code></pre>
<ol start="7">
<li>ist.remove(obj)移除列表中某个值的第一个匹配项</li>
</ol>
<pre><code>list1 = [1,2,3,1]
list1.remove(1)
print(list1) #[2, 3, 1]

</code></pre>
<ol start="8">
<li>list.reverse()反向列表中元素</li>
</ol>
<pre><code>list1 = [1,2,3]
list1.reverse()
print(list1)#[3, 2, 1]
</code></pre>
<ol start="9">
<li>list.sort( key=None, reverse=False)对原列表进行排序</li>
</ol>
<pre><code>list1 = [2,1,3]
list1.sort()
print(list1)#[1, 2, 3]
</code></pre>
<ol start="10">
<li>list.clear()清空列表</li>
</ol>
<pre><code>list1 = [1,2,3]
list1.clear()
print(len(list1))#0
</code></pre>
<ol start="11">
<li>list.copy()复制列表</li>
</ol>
<pre><code>list1 = [1,2,3]
list2 = list1.copy()
print(list2)#[1, 2, 3]
</code></pre>
<h3 id="tuple元组">Tuple(元组)</h3>
<p>格式：<code>()</code>，使用<code>,</code>进行分割</p>
<ul>
<li>当元组中只有一个元素时，要在元素后面写一个<code>,</code>,否则会被当做int 型</li>
<li>使用下标索引来访问元组中的元素，也可以进行截取，和String、List 等操作一样</li>
<li>元组不允许修改，但可以用<code>+</code>来进行连接</li>
<li>元素中的值是不能删除的，但可以用del 来删除整个元组.</li>
<li>元组内置函数和列表内置函数一样，不同的是<code>tuple(iterable)将可迭代系列转换为元组。</code></li>
</ul>
<h3 id="set集合">Set(集合)</h3>
<p>集合是一个无序不重复的元素序列<br>
格式：<code>{}</code>，元素用<code>,</code>分开</p>
<ul>
<li>一个空的集合不能用<code>{}</code>,<code>{}</code>代表一个空的字典，要使用set()函数来创建一个空的集合。</li>
</ul>
<pre><code>var1 = {&quot;hello&quot;,&quot;world&quot;,&quot;hello&quot;}
var2 = set() 
print(var1) #{'world', 'hello'}
print(len(var2)) #0
</code></pre>
<ul>
<li>集合推导式</li>
</ul>
<pre><code>&gt;&gt;&gt; a = {x for x in 'abracadabra' if x not in 'abc'}
&gt;&gt;&gt; a
{'r', 'd'}
</code></pre>
<ul>
<li>添加元素</li>
</ul>
<ol>
<li>add 可以添加元素</li>
<li>update 可以也可以元素，且元素可以为不同类型，</li>
</ol>
<pre><code>var2 = set()
var2.add(&quot;hello&quot;)
var2.update({1,2,4})
print(var2)#{1, 2, 4, 'hello'}
</code></pre>
<ul>
<li>移除元素</li>
</ul>
<ol>
<li>remove(),若元素不存在则报错</li>
<li>discard(),若元素不存在不报错</li>
<li>pop(),随机删除一个元素，每次结果都不一样</li>
</ol>
<pre><code>var = {1, 2, 'hello', 4}
var2.remove(2)
print(var2) # {1, 'hello', 4}
var2.discard(4)
print(var2)#{1, 'hello'}
print(var2.pop())#1
</code></pre>
<h3 id="dictionary字典">Dictionary(字典)</h3>
<p>字典是一种键值对的集合<br>
格式：使用<code>{}</code>，字典中的每个元素都是一个键值对，元素之间用<code>,</code>分割，键是一个字符串，值为任意类型，中间用<code>:</code>分割</p>
<pre><code>var = {&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3}
</code></pre>
<ul>
<li>键必须是不可变的类型，如字符串、元组和数字，但值可以随意</li>
<li>字典的键不可以重复，如果重复则下一个值会覆盖原来的值</li>
<li>访问字典的值,把键放到括号中</li>
</ul>
<pre><code>dict = {&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3}
print(dict[&quot;a&quot;]) #1
</code></pre>
<ul>
<li>修改和增加值</li>
</ul>
<pre><code>dict = {&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3}
print(dict[&quot;a&quot;]) #1
# 修改值
dict[&quot;a&quot;] = &quot;a&quot;
# 增加值
dict[&quot;d&quot;] = 4
print(dict)#{'a': 'a', 'b': 2, 'c': 3, 'd': 4}
</code></pre>
<ul>
<li>删除字典元素和字典</li>
</ul>
<pre><code># 删除字典元素
del dict[&quot;a&quot;]
# 清空字典
dict.clear()
# 删除字典
del dict
</code></pre>
<ul>
<li>字典包含的内置方法</li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>radiansdict.clear()</td>
<td>删除字典内所有元素</td>
</tr>
<tr>
<td>radiansdict.copy()</td>
<td>返回一个字典的浅复制</td>
</tr>
<tr>
<td>radiansdict.fromkeys()</td>
<td>创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值</td>
</tr>
<tr>
<td>radiansdict.get(key, default=None)</td>
<td>返回指定键的值，如果值不在字典中返回default值</td>
</tr>
<tr>
<td>key in dict</td>
<td>如果键在字典dict里返回true，否则返回false</td>
</tr>
<tr>
<td>radiansdict.items()</td>
<td>以列表返回可遍历的(键, 值) 元组数组</td>
</tr>
<tr>
<td>radiansdict.keys()</td>
<td>返回一个迭代器，可以使用 list() 来转换为列表</td>
</tr>
<tr>
<td>radiansdict.setdefault(key, default=None)</td>
<td>和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td>
</tr>
<tr>
<td>radiansdict.update(dict2)</td>
<td>把字典dict2的键/值对更新到dict里</td>
</tr>
<tr>
<td>radiansdict.values()</td>
<td>返回一个迭代器，可以使用 list() 来转换为列表</td>
</tr>
<tr>
<td>pop(key[,default])</td>
<td>删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td>
</tr>
<tr>
<td>popitem()</td>
<td>随机返回并删除字典中的最后一对键和值。</td>
</tr>
</tbody>
</table>
]]></summary>
        <content type="html"><![CDATA[<h2 id="基础语法">基础语法</h2>
<p><strong>标识符</strong></p>
<ul>
<li>第一个字符是字母或者_</li>
<li>标识符可以由字母、数字或者下划线组成</li>
<li>标识符大小写敏感</li>
<li>python3 中还可以使用中文，非ASCII标识符也允许，但不符合我们一般的编程习惯，一般不建议<br>
例如:</li>
</ul>
<pre><code>a 
_a
_a1
变量
</code></pre>
<p><strong>关键字</strong><br>
不能使用关键字作为变量的名称，python 标准库提供了一个keyword 模板，可以输出当前版本所有的关键字:</p>
<ol>
<li>导入keyword 库：<code>import keyword</code></li>
<li>查询关键字：<code>keyword.kwlist</code></li>
</ol>
<p>这是Python3 的关键字:</p>
<blockquote>
<p>'False','None', 'True', 'and', 'as',<br>
'assert', 'async', 'await', 'break', 'class',<br>
'continue', 'def', 'del', 'elif', 'else',<br>
'except', 'finally', 'for', 'from', 'global',<br>
'if', 'import', 'in', 'is', 'lambda',<br>
'nonlocal', 'not', 'or', 'pass', 'raise',<br>
'return', 'try', 'while', 'with', 'yield'</p>
</blockquote>
<p><strong>注释</strong></p>
<ul>
<li>单行注释:单行注释以#开头</li>
</ul>
<pre><code># 第一个注释
print(&quot;hello world&quot;); # 第二个注释
</code></pre>
<ul>
<li>多行注释</li>
</ul>
<pre><code>&quot;&quot;&quot;
这是第一行注释
这是第二行注释   
这是第三行注释
&quot;&quot;&quot;
print(&quot;hello world&quot;);
</code></pre>
<p><strong>缩进</strong><br>
Python 使用缩进来代表代码块，缩进的空格数可变，但同一个代码块必须使用相同的缩进</p>
<pre><code>if a &gt; 10:
    print(&quot;a &gt; 10&quot;);
elif a == 10:
    print(&quot;a = 10&quot;);
else:
    print(&quot;a &lt; 10&quot;);
print(&quot;over&quot;);
</code></pre>
<p>最下面的打印语句就不在if,else 代码块内</p>
<p><strong>多行语句</strong><br>
如果一个语句过长，Python 可以使用反斜杠来实现多行语句.</p>
<pre><code>a = &quot;abc&quot;+\
    &quot;def&quot;+\
    &quot;ghi&quot;
print(a)
</code></pre>
<p>输出为：<code>abcdefghi</code></p>
<p>注意：在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()，例如：<br>
<strong>同一行显示多条语句</strong><br>
Python可以在同一行中使用多条语句，语句之间使用分号(;)分割，以下是一个简单的实例:</p>
<pre><code>a = 11;print(a)
</code></pre>
<p>Python 不必每个语句后面加上<code>;</code></p>
<p><strong>空行</strong><br>
函数之间或类的方法之间用空行分隔，表示一段新的代码的开始，类和函数入口也用一行空格分割，以突出函数入口开始.</p>
<ul>
<li>空行并不是Python 语法的一部分，不写空行Python解释器运行也不会出错.</li>
<li>空行是程序的一部分</li>
</ul>
<p><strong>import</strong></p>
<ul>
<li>将整个模块导入</li>
</ul>
<pre><code>import ModuleName
</code></pre>
<ul>
<li>从某个模块导入某个函数</li>
</ul>
<pre><code>from ModuleName import FunctionName
</code></pre>
<ul>
<li>从某个模块导入多个函数</li>
</ul>
<pre><code>from ModuleName import FunctionName1,FunctionName2,FunctionName3
</code></pre>
<ul>
<li>将某个模块中的函数全部导入</li>
</ul>
<pre><code>from ModuleName import *
</code></pre>
<h2 id="变量">变量</h2>
<p>py中使用变量不需要声明，直接赋值，不能使用没有赋值的变量。<br>
py是一个动态类型语言，可以为变量赋任意类型值，也可以任意修改变量的值</p>
<pre><code>a = 10
a = &quot;abc&quot;
a = [1,2,3]
a = (1,2,3)
</code></pre>
<p>python 可以为多个变量同时赋值</p>
<pre><code>a,b = 1,2  
</code></pre>
<p>在混合运算时，Python 会把整型转化为浮点型</p>
<pre><code>&gt;&gt;&gt; 10/5+2
4.0
</code></pre>
<h2 id="数据类型">数据类型</h2>
<p>Python 中的标准数据类型</p>
<ul>
<li>Number(数字)</li>
<li>String(字符串)</li>
<li>List(列表)</li>
<li>Tuple(元组)</li>
<li>Set(集合)</li>
<li>Dictionary(字典)</li>
</ul>
<p>数据可变:List、Set、Dictionary<br>
数据不可变:Number、String、Tuple</p>
<p><strong>type()和isinstance()</strong></p>
<p>type是Python 的内置函数，可以用来判断变量所指的对象类型.</p>
<pre><code>print(type(1))
print(type(1.1))
print(type(True))
print(type(&quot;Tom&quot;))
print(type([1,2,3]))
print(type((1,2,3)))
print(type({1,2,3}))
print(type({'name':'Tom','age':18}))
</code></pre>
<p>结果:</p>
<pre><code>&lt;class 'int'&gt;
&lt;class 'float'&gt;
&lt;class 'bool'&gt;
&lt;class 'str'&gt;
&lt;class 'list'&gt;
&lt;class 'tuple'&gt;
&lt;class 'set'&gt;
&lt;class 'dict'&gt;
</code></pre>
<p>instance也可以用来判断</p>
<pre><code>print(isinstance(1,int))
print(isinstance(1.1,float))
print(isinstance(True,bool))
print(isinstance(&quot;Tom&quot;,str))
print(isinstance([1,2,3],list))
print(isinstance((1,2,3),tuple))
print(isinstance({1,2,3},set))
print(isinstance({'name':'Tom','age':18},dict))
</code></pre>
<p>结果:</p>
<pre><code>True
True
True
True
True
True
True
True
</code></pre>
<p>type和isinstance 的区别:</p>
<ul>
<li>type 不会认为其子类是一种父类类型</li>
<li>isinstance 会认为其子类是一种父类类型</li>
</ul>
<pre><code>class Parent:
    pass

class Son(Parent):
    pass

print(type(Son()) == Son)
print(type(Son()) == Parent)
print(isinstance(Son(),Son))
print(isinstance(Son(),Parent))
</code></pre>
<p>结果:</p>
<pre><code>True
False
True
True
</code></pre>
<p><strong>del 删除一些对象的引用</strong></p>
<ul>
<li>del VarName</li>
</ul>
<pre><code>var = 10      
del var       
</code></pre>
<h3 id="number-数值">Number 数值</h3>
<p>Number 里有四种数值类型:int float bool complex</p>
<blockquote>
<p>Python2 中是没有bool 类型的，用数字0表示False,数字1表示True,<br>
Python3 中把True和False 定义成关键字了，但它们本质上还是0和1，可以进行运算</p>
</blockquote>
<pre><code>print(True+True)
print(True-True)
print(True+False)
</code></pre>
<p>结果:</p>
<pre><code>2
0
1
</code></pre>
<p><strong>数值运算</strong><br>
数值运算一共有六种：加法、减法、乘法、除法、乘方、取余</p>
<ul>
<li>加法</li>
</ul>
<pre><code>&gt;&gt;&gt; 10+5
15
</code></pre>
<ul>
<li>减法</li>
</ul>
<pre><code>&gt;&gt;&gt; 10-5
5
</code></pre>
<ul>
<li>乘法</li>
</ul>
<pre><code>&gt;&gt;&gt; 10*5
50
</code></pre>
<ul>
<li>除法（得到一个浮点数）</li>
</ul>
<pre><code>&gt;&gt;&gt; 10/5
2.0
</code></pre>
<ul>
<li>除法（得到一个整数）</li>
</ul>
<pre><code>&gt;&gt;&gt; 10//5
2
</code></pre>
<ul>
<li>乘方</li>
</ul>
<pre><code>&gt;&gt;&gt; 10**5
100000
</code></pre>
<ul>
<li>取余</li>
</ul>
<pre><code>&gt;&gt;&gt; 11%5
1
</code></pre>
<h3 id="string-字符串">String 字符串</h3>
<p>使用单引号或者双引号括起来的是字符串</p>
<pre><code>var = 'a'
var = &quot;a&quot;
</code></pre>
<p><strong>字符串连接</strong><br>
使用<code>+</code>进行字符串的连接.</p>
<pre><code>&gt;&gt;&gt; print(&quot;abcdefg&quot;+&quot;Test&quot;)
abcdefgTest
</code></pre>
<p><strong>字符串复制</strong><br>
使用<code>*</code>进行字符串的复制</p>
<pre><code>&gt;&gt;&gt; print(&quot;abc&quot;*3)
abcabcabc
</code></pre>
<p><strong>字符串截取</strong><br>
格式: <code>变量[头下标:尾下标]</code><br>
索引值以0开始为开始下标，以-1为从末尾开始位置</p>
<pre><code>str1 = &quot;abcdefg&quot;
print (str1[0:-1])    # 输出第一个到倒数第二个的所有字符
print (str1[0])       # 输出字符串第一个字符
print (str1[2:5])     # 输出从第三个开始到第五个的字符
print (str1[2:])      # 输出从第三个开始的后的所有字符
</code></pre>
<p>结果:</p>
<pre><code>abcdef
a
cde
cdefg
</code></pre>
<p>Python 可以使用反斜杠转义特殊字符，可以在字符串之前加字符r防止转义</p>
<pre><code>&gt;&gt;&gt; print(&quot;hello\nworld&quot;)
hello
world
&gt;&gt;&gt; print(r&quot;hello\nworld&quot;)
hello\nworld
</code></pre>
<p>字符串是不可变类型，不可以对某个索引进行修改</p>
<pre><code>str1[0] = 'b'
</code></pre>
<p>上面这个操作会报错。</p>
<p>注意:</p>
<ul>
<li>Python 中没有字符类型,'c' 表示一个长度为1的字符串.</li>
</ul>
<h3 id="list列表">List列表</h3>
<p>格式：<code>[]</code>,数据用<code>,</code>分开</p>
<ul>
<li>列表中的数据可以有不同的类型.</li>
<li>列表可以使用索引和截取，被截取后返回的是一个新的列表.</li>
<li><code>+</code>是列表连接运算符，<code>*</code>是重复操作.</li>
<li>列表中的元素是可变的</li>
</ul>
<pre><code>list = [1,&quot;abc&quot;,2]
print(list)
list[2] = &quot;hello&quot;
print(list)
</code></pre>
<p>结果</p>
<pre><code>[1, 'abc', 2]
[1, 'abc', 'hello']
</code></pre>
<ul>
<li>删除列表元素<br>
使用del 进行删除</li>
</ul>
<pre><code>list = [1,&quot;abc&quot;,2]
del list[0]
print(list)
</code></pre>
<p>结果：</p>
<pre><code>[1, 'abc', 2]
['abc', 2]
</code></pre>
<ul>
<li>列表可以嵌套<br>
在列表里可以创建其它列表</li>
</ul>
<pre><code>list2 = [[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;],&quot;d&quot;,&quot;e&quot;]
print(list2[0])
</code></pre>
<p>结果：</p>
<pre><code>['a', 'b', 'c']
</code></pre>
<ul>
<li>Python 列表中的函数</li>
</ul>
<ol>
<li>len(list)列表元素个数</li>
</ol>
<pre><code>&gt;&gt;&gt; print(len([1,&quot;abc&quot;,2]))
3
</code></pre>
<ol start="2">
<li>max(list) 返回列表元素最大值</li>
</ol>
<pre><code>&gt;&gt;&gt; print(max([1,2,3,5,9]))
9
</code></pre>
<ol start="3">
<li>min(list) 返回列表元素最小值</li>
</ol>
<pre><code>&gt;&gt;&gt; print(min([1,2,3,5,9]))
1
</code></pre>
<ol start="4">
<li>list(seq) 将元素转化为列表</li>
</ol>
<pre><code>&gt;&gt;&gt; print(type(list((1,2,3))))
&lt;class 'list'&gt;
</code></pre>
<ul>
<li>Python 中的方法</li>
</ul>
<ol>
<li>list.append(obj)  在列表末尾添加新的对象</li>
</ol>
<pre><code>list1 = [1,2,3]
list1.append(&quot;hello&quot;)
print(list1)  #[1, 2, 3, 'hello']
</code></pre>
<ol start="2">
<li>list.count(obj) 统计某个元素在列表中出现的次数</li>
</ol>
<pre><code>list1 = [1,1,2,3]
print(list1.count(1)) #2
</code></pre>
<ol start="3">
<li>list.extend(seq)在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</li>
</ol>
<pre><code>list1 = [1,2,3]
list1.extend([3,4,5])
print(list1) #[1, 2, 3, 3, 4, 5]
</code></pre>
<ol start="4">
<li>list.index(obj)从列表中找出某个值第一个匹配项的索引位置</li>
</ol>
<pre><code>list1 = [1,2,3,4,3,3]
print(list1.index(3)) #2
</code></pre>
<ol start="5">
<li>list.insert(index, obj) 将对象插入列表</li>
</ol>
<pre><code>list1 = [1,2,3]
list1.insert(2,&quot;hello&quot;)
print(list1) # [1, 2, 'hello', 3]
</code></pre>
<ol start="6">
<li>list.pop([index=-1]) 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</li>
</ol>
<pre><code>list1 = [1,2,3]
list1.pop()
print(list1) # [1, 2]
list1.pop(0)
print(list1) #[2]
</code></pre>
<ol start="7">
<li>ist.remove(obj)移除列表中某个值的第一个匹配项</li>
</ol>
<pre><code>list1 = [1,2,3,1]
list1.remove(1)
print(list1) #[2, 3, 1]

</code></pre>
<ol start="8">
<li>list.reverse()反向列表中元素</li>
</ol>
<pre><code>list1 = [1,2,3]
list1.reverse()
print(list1)#[3, 2, 1]
</code></pre>
<ol start="9">
<li>list.sort( key=None, reverse=False)对原列表进行排序</li>
</ol>
<pre><code>list1 = [2,1,3]
list1.sort()
print(list1)#[1, 2, 3]
</code></pre>
<ol start="10">
<li>list.clear()清空列表</li>
</ol>
<pre><code>list1 = [1,2,3]
list1.clear()
print(len(list1))#0
</code></pre>
<ol start="11">
<li>list.copy()复制列表</li>
</ol>
<pre><code>list1 = [1,2,3]
list2 = list1.copy()
print(list2)#[1, 2, 3]
</code></pre>
<h3 id="tuple元组">Tuple(元组)</h3>
<p>格式：<code>()</code>，使用<code>,</code>进行分割</p>
<ul>
<li>当元组中只有一个元素时，要在元素后面写一个<code>,</code>,否则会被当做int 型</li>
<li>使用下标索引来访问元组中的元素，也可以进行截取，和String、List 等操作一样</li>
<li>元组不允许修改，但可以用<code>+</code>来进行连接</li>
<li>元素中的值是不能删除的，但可以用del 来删除整个元组.</li>
<li>元组内置函数和列表内置函数一样，不同的是<code>tuple(iterable)将可迭代系列转换为元组。</code></li>
</ul>
<h3 id="set集合">Set(集合)</h3>
<p>集合是一个无序不重复的元素序列<br>
格式：<code>{}</code>，元素用<code>,</code>分开</p>
<ul>
<li>一个空的集合不能用<code>{}</code>,<code>{}</code>代表一个空的字典，要使用set()函数来创建一个空的集合。</li>
</ul>
<pre><code>var1 = {&quot;hello&quot;,&quot;world&quot;,&quot;hello&quot;}
var2 = set() 
print(var1) #{'world', 'hello'}
print(len(var2)) #0
</code></pre>
<ul>
<li>集合推导式</li>
</ul>
<pre><code>&gt;&gt;&gt; a = {x for x in 'abracadabra' if x not in 'abc'}
&gt;&gt;&gt; a
{'r', 'd'}
</code></pre>
<ul>
<li>添加元素</li>
</ul>
<ol>
<li>add 可以添加元素</li>
<li>update 可以也可以元素，且元素可以为不同类型，</li>
</ol>
<pre><code>var2 = set()
var2.add(&quot;hello&quot;)
var2.update({1,2,4})
print(var2)#{1, 2, 4, 'hello'}
</code></pre>
<ul>
<li>移除元素</li>
</ul>
<ol>
<li>remove(),若元素不存在则报错</li>
<li>discard(),若元素不存在不报错</li>
<li>pop(),随机删除一个元素，每次结果都不一样</li>
</ol>
<pre><code>var = {1, 2, 'hello', 4}
var2.remove(2)
print(var2) # {1, 'hello', 4}
var2.discard(4)
print(var2)#{1, 'hello'}
print(var2.pop())#1
</code></pre>
<h3 id="dictionary字典">Dictionary(字典)</h3>
<p>字典是一种键值对的集合<br>
格式：使用<code>{}</code>，字典中的每个元素都是一个键值对，元素之间用<code>,</code>分割，键是一个字符串，值为任意类型，中间用<code>:</code>分割</p>
<pre><code>var = {&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3}
</code></pre>
<ul>
<li>键必须是不可变的类型，如字符串、元组和数字，但值可以随意</li>
<li>字典的键不可以重复，如果重复则下一个值会覆盖原来的值</li>
<li>访问字典的值,把键放到括号中</li>
</ul>
<pre><code>dict = {&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3}
print(dict[&quot;a&quot;]) #1
</code></pre>
<ul>
<li>修改和增加值</li>
</ul>
<pre><code>dict = {&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3}
print(dict[&quot;a&quot;]) #1
# 修改值
dict[&quot;a&quot;] = &quot;a&quot;
# 增加值
dict[&quot;d&quot;] = 4
print(dict)#{'a': 'a', 'b': 2, 'c': 3, 'd': 4}
</code></pre>
<ul>
<li>删除字典元素和字典</li>
</ul>
<pre><code># 删除字典元素
del dict[&quot;a&quot;]
# 清空字典
dict.clear()
# 删除字典
del dict
</code></pre>
<ul>
<li>字典包含的内置方法</li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>radiansdict.clear()</td>
<td>删除字典内所有元素</td>
</tr>
<tr>
<td>radiansdict.copy()</td>
<td>返回一个字典的浅复制</td>
</tr>
<tr>
<td>radiansdict.fromkeys()</td>
<td>创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值</td>
</tr>
<tr>
<td>radiansdict.get(key, default=None)</td>
<td>返回指定键的值，如果值不在字典中返回default值</td>
</tr>
<tr>
<td>key in dict</td>
<td>如果键在字典dict里返回true，否则返回false</td>
</tr>
<tr>
<td>radiansdict.items()</td>
<td>以列表返回可遍历的(键, 值) 元组数组</td>
</tr>
<tr>
<td>radiansdict.keys()</td>
<td>返回一个迭代器，可以使用 list() 来转换为列表</td>
</tr>
<tr>
<td>radiansdict.setdefault(key, default=None)</td>
<td>和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td>
</tr>
<tr>
<td>radiansdict.update(dict2)</td>
<td>把字典dict2的键/值对更新到dict里</td>
</tr>
<tr>
<td>radiansdict.values()</td>
<td>返回一个迭代器，可以使用 list() 来转换为列表</td>
</tr>
<tr>
<td>pop(key[,default])</td>
<td>删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td>
</tr>
<tr>
<td>popitem()</td>
<td>随机返回并删除字典中的最后一对键和值。</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Appium 环境搭建]]></title>
        <id>https://jm0820.github.io/post/appium-huan-jing-da-jian/</id>
        <link href="https://jm0820.github.io/post/appium-huan-jing-da-jian/">
        </link>
        <updated>2020-04-29T16:42:33.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[文件的上传和下载]]></title>
        <id>https://jm0820.github.io/post/wen-jian-de-shang-chuan-he-xia-zai/</id>
        <link href="https://jm0820.github.io/post/wen-jian-de-shang-chuan-he-xia-zai/">
        </link>
        <updated>2020-04-28T17:21:45.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[国际化]]></title>
        <id>https://jm0820.github.io/post/guo-ji-hua/</id>
        <link href="https://jm0820.github.io/post/guo-ji-hua/">
        </link>
        <updated>2020-04-28T09:44:19.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[EL 表达式]]></title>
        <id>https://jm0820.github.io/post/el-biao-da-shi/</id>
        <link href="https://jm0820.github.io/post/el-biao-da-shi/">
        </link>
        <updated>2020-04-21T06:04:11.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Listen]]></title>
        <id>https://jm0820.github.io/post/listen/</id>
        <link href="https://jm0820.github.io/post/listen/">
        </link>
        <updated>2020-04-21T04:48:06.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Filter]]></title>
        <id>https://jm0820.github.io/post/filter/</id>
        <link href="https://jm0820.github.io/post/filter/">
        </link>
        <updated>2020-04-20T15:50:37.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[JSP]]></title>
        <id>https://jm0820.github.io/post/jsp/</id>
        <link href="https://jm0820.github.io/post/jsp/">
        </link>
        <updated>2020-04-01T18:24:19.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cookie 和 Session]]></title>
        <id>https://jm0820.github.io/post/cookie&amp;Session/</id>
        <link href="https://jm0820.github.io/post/cookie&amp;Session/">
        </link>
        <updated>2020-03-24T16:12:08.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Servlet ]]></title>
        <id>https://jm0820.github.io/post/servlet/</id>
        <link href="https://jm0820.github.io/post/servlet/">
        </link>
        <updated>2020-03-19T15:40:33.000Z</updated>
    </entry>
</feed>